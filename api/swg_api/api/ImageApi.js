/**
 * style-api
 * This is a API document for Stylens Service
 *
 * OpenAPI spec version: 0.0.2
 * Contact: master@bluehack.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetImageResponse', 'model/GetImagesResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetImageResponse'), require('../model/GetImagesResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.StyleApi) {
      root.StyleApi = {};
    }
    root.StyleApi.ImageApi = factory(root.StyleApi.ApiClient, root.StyleApi.GetImageResponse, root.StyleApi.GetImagesResponse);
  }
}(this, function(ApiClient, GetImageResponse, GetImagesResponse) {
  'use strict';

  /**
   * Image service.
   * @module api/ImageApi
   * @version 0.0.2
   */

  /**
   * Constructs a new ImageApi. 
   * @alias module:api/ImageApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getImageByHostcodeAndProductNo operation.
     * @callback module:api/ImageApi~getImageByHostcodeAndProductNoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Image by hostCode and productNo
     * Returns Image belongs to a Host and productNo
     * @param {String} hostCode 
     * @param {String} productNo 
     * @param {module:api/ImageApi~getImageByHostcodeAndProductNoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImageResponse}
     */
    this.getImageByHostcodeAndProductNo = function(hostCode, productNo, callback) {
      var postBody = null;

      // verify the required parameter 'hostCode' is set
      if (hostCode === undefined || hostCode === null) {
        throw new Error("Missing the required parameter 'hostCode' when calling getImageByHostcodeAndProductNo");
      }

      // verify the required parameter 'productNo' is set
      if (productNo === undefined || productNo === null) {
        throw new Error("Missing the required parameter 'productNo' when calling getImageByHostcodeAndProductNo");
      }


      var pathParams = {
        'hostCode': hostCode,
        'productNo': productNo
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetImageResponse;

      return this.apiClient.callApi(
        '/images/hosts/{hostCode}/images/{productNo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageById operation.
     * @callback module:api/ImageApi~getImageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Images by ID
     * Returns a single Image
     * @param {String} imageId ID of Image to return
     * @param {module:api/ImageApi~getImageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImageResponse}
     */
    this.getImageById = function(imageId, callback) {
      var postBody = null;

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageById");
      }


      var pathParams = {
        'imageId': imageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetImageResponse;

      return this.apiClient.callApi(
        '/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImages operation.
     * @callback module:api/ImageApi~getImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Images by imageId
     * Returns similar Images with imageId
     * @param {String} imageId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset 
     * @param {Number} opts.limit 
     * @param {module:api/ImageApi~getImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImagesResponse}
     */
    this.getImages = function(imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'imageId': imageId,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetImagesResponse;

      return this.apiClient.callApi(
        '/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImagesByUserImageFile operation.
     * @callback module:api/ImageApi~getImagesByUserImageFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query to search images
     * 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file User&#39;s Image file to upload (only support jpg format yet)
     * @param {Number} opts.offset 
     * @param {Number} opts.limit 
     * @param {module:api/ImageApi~getImagesByUserImageFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImagesResponse}
     */
    this.getImagesByUserImageFile = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = GetImagesResponse;

      return this.apiClient.callApi(
        '/images/userImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImagesByUserImageIdAndObjectIndex operation.
     * @callback module:api/ImageApi~getImagesByUserImageIdAndObjectIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Images by userImageId and objectIndex
     * Returns Images belongs to a userImageId and objectIndex
     * @param {String} userImageId 
     * @param {Number} objectIndex 
     * @param {module:api/ImageApi~getImagesByUserImageIdAndObjectIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImagesResponse}
     */
    this.getImagesByUserImageIdAndObjectIndex = function(userImageId, objectIndex, callback) {
      var postBody = null;

      // verify the required parameter 'userImageId' is set
      if (userImageId === undefined || userImageId === null) {
        throw new Error("Missing the required parameter 'userImageId' when calling getImagesByUserImageIdAndObjectIndex");
      }

      // verify the required parameter 'objectIndex' is set
      if (objectIndex === undefined || objectIndex === null) {
        throw new Error("Missing the required parameter 'objectIndex' when calling getImagesByUserImageIdAndObjectIndex");
      }


      var pathParams = {
        'userImageId': userImageId,
        'objectIndex': objectIndex
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetImagesResponse;

      return this.apiClient.callApi(
        '/images/userImages/{userImageId}/objects/{objectIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
